// https://docs.spring.io/spring-boot/docs/2.4.5/reference/html/dependency-versions.html#dependency-versions
buildscript {
    ext {
        groupId = "io.github.syaku"
        versionName = "1.0.0-SNAPSHOT"
        // https://docs.spring.io/spring-boot/docs/2.4.5/reference/htmlsingle
        springBootVersion = "2.4.5"
        // https://docs.spring.io/spring-cloud/docs/2020.0.3/reference/html/
        springCloudVersion = "2020.0.3"
        junitVersion = "5.7.1"
        lombokVersion = "1.18.12"
        restDocsVersion = "2.0.5.RELEASE"
        jacksonVersion = "2.11.4"
        mapstructVersion = "1.4.2.Final"
        querydslVersion = "4.4.0"
        h2Version = "1.4.200"
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "io.franzbecker:gradle-lombok:3.1.0"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
    }
}

wrapper {
    gradleVersion = "6.5"
}

apply plugin: "java"
apply plugin: "java-library"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.asciidoctor.convert"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"
apply plugin: "maven-publish"

idea {
    module {
        inheritOutputDirs = true
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

repositories {
    mavenCentral()
}

group groupId
version versionName

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = 'UTF-8'

configurations {
    implementation.exclude module: "spring-boot-starter-tomcat"
    testImplementation.exclude group: "junit", module: "junit"
    querydsl.extendsFrom compileClasspath
}

processResources {
    filesMatching('application.yml') {
        expand(project.properties)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:0.1.0"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-annotations:0.1.0"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-annotations:0.1.0"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    implementation "org.apache.commons:commons-lang3:3.7"
    implementation "commons-io:commons-io:2.6"

    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${restDocsVersion}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${restDocsVersion}"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-web"
    // or implementation "org.springframework.boot:spring-boot-starter"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${jacksonVersion}"
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}"
    annotationProcessor(
        "jakarta.persistence:jakarta.persistence-api",
        "jakarta.annotation:jakarta.annotation-api",
        "com.querydsl:querydsl-apt:${querydslVersion}:jpa"
    )

    testImplementation "com.h2database:h2:${h2Version}"
    compileOnly "com.h2database:h2:${h2Version}"

    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
    }
}

// <------- RestDocs & Asciidoctor
def snippetsDir = file("${buildDir}/generated-snippets")

asciidoctor {
    attributes "snippets": snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

task copyAsciidoc(type: Copy) {
    dependsOn asciidoctor
    from file("${buildDir}/asciidoc/html5")
    into file("src/main/resources/static/docs")
}
// ------- RestDocs & Asciidoctor ->

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'spring.profiles.active', 'test'
}

clean {
    delete file('src/main/resources/static/docs')
}

build {
    dependsOn copyAsciidoc
}

application {
    mainClass = "${groupId}.Application"
}


bootJar {
    enabled true
    launchScript()
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into "BOOT-INF/classes/static/docs"
    }
}

jar {
    enabled false
}
