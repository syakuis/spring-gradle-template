// https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/dependency-versions.html#dependency-versions
// https://docs.spring.io/spring-boot/docs/2.7.9/reference/htmlsingle
// https://docs.spring.io/spring-cloud/docs/2021.0.5/reference/html/
buildscript {
    ext {
        groupId = "io.github.syaku"
        versionName = "1.0.0-SNAPSHOT"

        springBootVersion = "2.7.9"
        springCloudVersion = "2021.0.5"
        lombokVersion = '1.18.24'
        jacksonVersion = '2.13.3'
        mapStructVersion = '1.5.2.Final'
        mapStructExtensionsVersion = '0.1.1'
        lombokMapStructVersion = '0.2.0'
        querydslVersion = '5.0.0'
        // 2 버전은 호환성 이슈가 있어 업그레이드 하지 않음.
        h2Version = "1.4.200"

        restDocsVersion = '2.0.6.RELEASE'
        snippetsDir = file("$buildDir/generated-snippets")
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
        classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.7.2"
    }
}

wrapper {
    gradleVersion = "7.6"
}

apply plugin: "java"
apply plugin: "application"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.asciidoctor.jvm.convert"
apply plugin: "maven-publish"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"
apply plugin: "com.google.osdetector"

ext.repoName = 'nexus3-repository'
ext.repoHost = project.hasProperty("repo.host") ? project.findProperty("repo.host") : ''
ext.repoUsername = project.hasProperty("repo.username") ? project.findProperty("repo.username") : ''
ext.repoPassword = project.hasProperty("repo.password") ? project.findProperty("repo.password") : ''
ext.repoSnapshotsUrl = "${repoHost}/repository/maven-snapshots/"
ext.repoReleasesUrl = "${repoHost}/repository/maven-releases/"

repositories {
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/syakuis/spring-gradle-template")
        credentials {
            username repoUsername
            password repoPassword
        }
    }
}

group groupId
version versionName

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = 'UTF-8'

configurations {
    implementation.exclude module: "spring-boot-starter-tomcat"
    querydsl.extendsFrom compileClasspath
    asciidoctorExtensions
}

//스냅샷 패키지 내려 받기 않을때 캐시 조절
//configurations.all {
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
//}

processResources {
    filesMatching('*.yml') {
        expand(project.properties)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    if (osdetector.arch.equals("aarch_64")) {
        implementation "io.netty:netty-resolver-dns-native-macos:4.1.79.Final:osx-aarch_64"
    }

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'

    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapStructExtensionsVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapStructExtensionsVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructVersion}"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapStructExtensionsVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructVersion}"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-undertow"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${jacksonVersion}"
    implementation "com.querydsl:querydsl-core:${querydslVersion}"
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}"
    annotationProcessor(
        "jakarta.persistence:jakarta.persistence-api",
        "jakarta.annotation:jakarta.annotation-api",
        "com.querydsl:querydsl-apt:${querydslVersion}:jpa"
    )

    compileOnly "com.h2database:h2:${h2Version}"
    testImplementation "com.h2database:h2:${h2Version}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    asciidoctorExtensions "org.springframework.restdocs:spring-restdocs-asciidoctor:${restDocsVersion}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${restDocsVersion}"

    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", ""
        property "sonar.projectKey", ""
        property "sonar.projectName", "spring-gradle-template"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'spring.profiles.active', 'test'
}

application {
    mainClass = 'io.github.syakuis.Application'
}

bootJar {
    enabled true
    launchScript()
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into "BOOT-INF/classes/static/api-docs"
    }
}

jar {
    enabled false
}


publishing {
    repositories {
        maven {
            name = repoName
            url = version.endsWith('SNAPSHOT') ? repoSnapshotsUrl : repoReleasesUrl

            credentials {
                username repoUsername
                password repoPassword
            }
            allowInsecureProtocol true
        }

    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

